parameters:
  python_version: '3.8'
  dependsOn: []
  custom_repository_name: ''

jobs:
  - job: publish
    dependsOn: ${{ parameters.dependsOn }}
    condition: succeeded()
    pool: {vmImage: 'ubuntu-latest'}
    variables:
      TMPDIR: $(Build.BinariesDirectory)
      PIP_DISABLE_PIP_VERSION_CHECK: '1'
      ${{ if parameters.custom_repository_name }}:
        custom_repository: true
      ${{ if not(parameters.custom_repository_name) }}:
        custom_repository: false
    steps:
      - task: UsePythonVersion@0
        displayName: setup python
        inputs:
          versionSpec: ${{ parameters.python_version }}
      - bash: python -m pip install -U --user --force-reinstall poetry
        displayName: Install poetry
      - bash: python -m poetry build
        displayName: Build package
      - bash: python -m poetry publish
        displayName: Upload to PyPI
        env:
          POETRY_PYPI_TOKEN_PYPI: $(POETRY_PYPI_TOKEN_PYPI)
          POETRY_HTTP_BASIC_PYPI_USERNAME: $(POETRY_HTTP_BASIC_PYPI_USERNAME)
          POETRY_HTTP_BASIC_PYPI_PASSWORD: $(POETRY_HTTP_BASIC_PYPI_PASSWORD)
        condition: ne(variables.custom_repository, true)
      - bash: python -m poetry publish -r ${{ parameters.custom_repository_name }}
        displayName: Upload to custom repository
        env:
          ${{ format('POETRY_PYPI_TOKEN_{0}', parameters.custom_repository_name) }}: $(${{ format('POETRY_PYPI_TOKEN_{0}', parameters.custom_repository_name) }}:)
          ${{ format('POETRY_HTTP_BASIC_{0}_USERNAME', parameters.custom_repository_name) }}: $(${{ format('POETRY_HTTP_BASIC_{0}_USERNAME', parameters.custom_repository_name) }})
          ${{ format('POETRY_HTTP_BASIC_{0}_PASSWORD', parameters.custom_repository_name) }}: $(${{ format('POETRY_HTTP_BASIC_{0}_PASSWORD', parameters.custom_repository_name) }})
        condition: eq(variables.custom_repository, true)

