parameters:
  dependsOn: []
  default_python: '3.8'
  additional_variables: {}
  checkout_submodules: true
  tox_version: ''
  tox_python: '3.8'
  pre_test: []
  post_test: []
  tox_envs: []
  coverage:
    with_toxenv: ''
    for_envs: []


jobs:
  - ${{ each tox_env in parameters.tox_envs }}:
    - job: ${{ coalesce(tox_env.value.display_name, tox_env.key) }}
      dependsOn: ${{ coalesce(tox_env.value.dependsOn, parameters.dependsOn) }}
      strategy:
        matrix:
          ${{ if tox_env.value.os }}:
            ${{ each os in tox_env.value.os }}:
              ${{ if and(In(os, 'win', 'windows'), tox_env.value.architectures) }}:
                ${{ each arch in tox_env.value.architectures }}:
                  ${{ format('windows_{0}', arch) }}:
                    arch: ${{ arch }}
                    os: 'windows-latest'
                    os_name: 'windows'
              ${{ if not(and(In(os, 'win', 'windows'), tox_env.value.architectures)) }}:
                ${{ if In(os, 'lin', 'linux') }}:
                  linux_x64:
                    arch: 'x64'
                    os: 'ubuntu-latest'
                    os_name: 'linux'
                ${{ if In(os, 'win', 'windows') }}:
                  windows_x64:
                    arch: 'x64'
                    os: 'windows-latest'
                    os_name: 'windows'
                ${{ if In(os, 'osx', 'macos') }}:
                  macos_x64:
                    arch: 'x64'
                    os: 'macOS-latest'
                    os_name: 'macOs'
                ${{ if notIn(os, 'lin', 'linux', 'win', 'windows', 'osx', 'macos') }}:
                  ${{ format('{0}_x64', os) }}:
                    arch: 'x64'
                    os: ${{ coalesce(os, 'ubuntu-latest') }}
                    os_name: ${{ coalesce(os, 'linux') }}
          ${{ if not(tox_env.value.os) }}:
            linux_x64:
              arch: 'x64'
              os: 'ubuntu-latest'
              os_name: 'linux'


      pool:
        vmImage: $[ variables['os'] ]


      variables:
        TMPDIR: $(Agent.TempDirectory)
        PIP_DISABLE_PIP_VERSION_CHECK: '1'
        TOXENV: ${{ tox_env.key }}
        ${{ if eq(variables.os_name, 'windows') }}:
          bindir: Scripts
        ${{ if ne(variables.os_name, 'windows') }}:
          bindir: bin
        ${{ if tox_env.value.py_version }}:
          py: ${{ tox_env.value.py_version }}
        ${{ if not(tox_env.value.py_version) }}:
          ${{ if or(eq(tox_env.key, 'py36'), startsWith(tox_env.key, 'py36-')) }}:
            py: '3.6'
          ${{ if or(eq(tox_env.key, 'py37'), startsWith(tox_env.key, 'py37-')) }}:
            py: '3.7'
          ${{ if or(eq(tox_env.key, 'py38'), startsWith(tox_env.key, 'py38-')) }}:
            py: '3.8'
          ${{ if or(eq(tox_env.key, 'py39'), startsWith(tox_env.key, 'py39-')) }}:
            py: '3.9'
            direct_call_version: '3.9'
          ${{ if or(eq(tox_env.key, 'pypy3'), startsWith(tox_env.key, 'pypy3-')) }}:
            py: 'pypy3'
          #: Use 'default_python' for toxenvs that don't start with 'py'
          ${{ if not(startsWith(tox_env.key, 'py')) }}:
            py: ${{ parameters.default_python }}
          ${{ insert }}: ${{ coalesce(tox_env.value.additional_variables, parameters.additional_variables) }}


      steps:
        #: checkout with submodules
        - ${{ if eq(parameters.checkout_submodules, true) }}:
          - checkout: self
            displayName: checkout source code (with submodules)
            submodules: true

        #: load tox python
        - task: UsePythonVersion@0
          name: toxPython
          displayName: "tox: get python"
          inputs:
            versionSpec: ${{ parameters.tox_python }}
            addToPath: false

        - script: $(toxPython.pythonLocation)/python -m pip install -U --user pip
          displayName: "tox: upgrade pip"
        - script: $(toxPython.pythonLocation)/python -m pip install -U --user setuptools virtualenv wheel
          displayName: "tox: upgrade setuptools, virtualenv, wheel"

        #: install tox for tox python
        - ${{ if parameters.tox_version }}:
          - script: ${{ format('$(toxPython.pythonLocation)/python -m pip install -U --user --force-reinstall tox=={0}', parameters.tox_version) }}
            displayName: "${{ format('tox: install version {0} from PyPi', parameters.tox_version) }}"
        - ${{ if not(parameters.tox_version) }}:
          - script: $(toxPython.pythonLocation)/python -m pip install -U --user --force-reinstall tox
            displayName: "tox: install newest version from PyPI"

        #: install python version for test target
        - task: UsePythonVersion@0
          displayName: 'provision test target python'
          condition: In(variables.py, '3.6', '3.7', '3.8', 'pypy3')
          inputs:
            versionSpec: $(py)
            architecture: $(arch)
        - script: |
            sudo add-apt-repository ppa:deadsnakes/nightly
            sudo apt-get update
            sudo apt-get install -y --no-install-recommends python3.9-dev python3.9-venv python3.9-distutils
          displayName: 'provision test target python 3.9 (pre-release)'
          condition: eq(variables.py, '3.9')

        #: run additional user configured 'setup' steps
        - ${{ if parameters.pre_test }}:
          - ${{ parameters.pre_test }}
        - ${{ if tox_env.value.pre_test }}:
          - ${{ tox_env.value.pre_test }}

        #: print PATH & info on test target python
        - script: |
            ${{ format('python{0} -c "import os; p=\"\n\".join(os.environ[\"PATH\"].split(os.pathsep)); print(f\"PATH:\n{{p}}\");"', variables.direct_call_version) }}
            ${{ format('python{0} -c "import sys; print(f\"\nPython Version:\n{{sys.version}}\n{{sys.executable}}\");"', variables.direct_call_version) }}
          displayName: show python information
          condition: In(variables.py, '3.6', '3.7', '3.8', '3.9')
        - script: |
            pypy3 -c "import os; p=\"\n\".join(os.environ[\"PATH\"].split(os.pathsep)); print(f\"PATH:\n{p}\");"
            pypy3 -c "import sys; print(f\"\nPython Version:\n{sys.version}\n{sys.executable}\");"
          displayName: show pypy3 information
          condition: In(variables.py, 'pypy3')

        #: print info on tox envs
        - script: $(toxPython.pythonLocation)/python -m tox -av
          displayName: "tox: provision and show envs"

        #: setup tox envs and run them afterwards
        - script: '$(toxPython.pythonLocation)/python -m tox --notest -vv --skip-missing-interpreters false'
          displayName: "tox: generate test environment"
        - script: '$(toxPython.pythonLocation)/python -m tox'
          displayName: "tox: run test environment"

        #: upload junit if present
        - bash: 'printf "##vso[task.setVariable variable=junit]" && ([ -f junit.$(TOXENV).xml ] && printf y || printf n) && echo ""'
          displayName: check for junit file
          workingDirectory: '$(System.DefaultWorkingDirectory)/.tox'
          condition: always()
        - task: PublishTestResults@2
          displayName: publish junit file
          inputs:
            testResultsFormat: "JUnit"
            testResultsFiles: '.tox/junit.$(TOXENV).xml'
            testRunTitle: 'junit-$(Agent.OS)-$(Agent.OSArchitecture)-$(TOXENV)'
          condition: eq(variables.junit, 'y')

        # upload coverage artifacts if present
        - ${{ if and(parameters.coverage.with_toxenv, containsValue(parameters.coverage.for_envs, tox_env.key)) }}:
          - script:  ${{ format('$(toxPython.pythonLocation)/python -m tox -e {0} --skip-missing-interpreters false', parameters.coverage.with_toxenv) }}
            displayName: create coverage report
          - task: CopyFiles@2
            displayName: move coverage files into staging area
            inputs:
              sourceFolder: $(System.DefaultWorkingDirectory)/.tox
              contents: |
                .coverage
                coverage.xml
              targetFolder: $(Build.StagingDirectory)
          - task: PublishBuildArtifacts@1
            displayName: publish coverage file
            inputs:
              pathtoPublish: $(Build.ArtifactStagingDirectory)
              ArtifactName: 'coverage-$(Agent.OS)-$(Agent.OSArchitecture)-$(TOXENV)'

        #: run additional user configured 'tear down' steps
        - ${{ if tox_env.value.post_test }}:
          - ${{ tox_env.value.post_test }}
        - ${{ if parameters.post_test }}:
          - ${{ parameters.post_test }}


  - ${{ if and(parameters.coverage.with_toxenv, parameters.coverage.for_envs) }}:
    - template: merge-coverage.yml
      parameters:
        tox_version: ${{ parameters.tox_version }}
        tox_python: ${{ parameters.tox_python }}
        toxenv: ${{ parameters.coverage.with_toxenv }}
        dependsOn: ${{ parameters.coverage.for_envs }}
